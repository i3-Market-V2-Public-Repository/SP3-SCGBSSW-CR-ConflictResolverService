{
  "openapi": "3.0.2",
  "info": {
    "title": "Conflict-Resolver Service (CRS) API",
    "version": "1.0",
    "description": "The Conflict-Resolver Service (CSR) can be queried to provide a signed resolution about the non-repudiation protocol associated to an invoice being valid or invalid. It could be invoked by either the consumer or the provider. It is a core element of the Conflict Resolution system in i3-MARKET.",
    "license": {
      "name": "EUPL-1.2",
      "url": "https://joinup.ec.europa.eu/sites/default/files/custom-page/attachment/2020-03/EUPL-1.2%20EN.txt"
    },
    "contact": {
      "name": "Juan Hern√°ndez Serrano",
      "email": "j.hernandez@upc.edu",
      "url": "https://github.com/juanelas"
    }
  },
  "servers": [
    {
      "url": "http://***REMOVED***:8888/"
    },
    {
      "url": "http://***REMOVED***:8888/"
    },
    {
      "url": "http://***REMOVED***:8888/"
    },
    {
      "url": "http://***REMOVED***:8888/"
    }
  ],
  "paths": {
    "/dispute": {
      "post": {
        "summary": "initiates a dispute claiiming that the cipherblock cannot be decrypted",
        "tags": [
          "Conflict-Resolver Service"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisputeInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "It returns a signed resolution as a compact JWS with payload:\n\n```typescript\n{\n  proofType: 'resolution'\n  type: 'dispute'\n  resolution: 'accepted' | 'denied' // resolution is 'denied' if the cipherblock can be properly decrypted; otherwise is 'accepted'\n  dataExchangeId: string // the unique id of this data exchange\n  iat: number // unix timestamp stating when it was resolved\n  iss: string // the public key of the CRS in JWK\n  sub: string // the public key (JWK) of the entity that requested a resolution\n}\n```\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignedResolution"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/verification": {
      "post": {
        "tags": [
          "Conflict-Resolver Service"
        ],
        "summary": "verification request of completeness of non-repudiation protocol regarding a data exchange",
        "description": "The Conflict-Resolver Service (CSR) can be queried to provide a signed resolution about a data exchanged successfully performed or not (completeness of the non-repudiation protocol). It could be invoked by either the consumer or the provider.\nA provider should query this endpoint to get a signed resolution to send along with the invoice to the consumer.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A signed resolution as a compact JWS with payload:\n\n```typescript\n{\n  proofType: 'resolution'\n  type: 'verification'\n  resolution: 'completed' | 'not completed' // whether the data exchange has been verified to be complete\n  dataExchangeId: string // the unique id of this data exchange\n  iat: number // unix timestamp stating when it was resolved\n  iss: string // the public key of the CRS in JWK\n  sub: string // the public key (JWK) of the entity that requested a resolution\n}\n```\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignedResolution"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SignedResolution": {
        "title": "SignedResolution",
        "type": "object",
        "required": [
          "signedResolution"
        ],
        "properties": {
          "signedResolution": {
            "$ref": "#/components/schemas/CompactJWS"
          }
        },
        "description": "A signed resolution object as a compact JWS signed by the CRS. The payload of a resolution is:\n\n```typescript\n{\n  proofType: 'resolution'\n  type: 'verification' | 'dispute'\n  resolution: 'completed' | 'not completed' | 'accepted' | 'denied' \n  dataExchangeId: string // the unique id of this data exchange\n  iat: number // unix timestamp stating when it was resolved\n  iss: string // the public key of the CRS as a JWK\n  sub: string // the public key (JWK) of the entity that requested a resolution\n}\n```\n\nIf `type` is `verification`, `resolution` can be `completed` (the non-repudiation protocol has been verified to be completed) or `not completed`.\n\nIf `type` is `dispute`, `resolution` accepted (the CRS has verified that the cipherblock exchanged cannot be decrypted) or `denied`.\n"
      },
      "CompactJWS": {
        "title": "CompactJWS",
        "type": "string",
        "pattern": "^[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]+$"
      },
      "ApiError": {
        "type": "object",
        "title": "Error",
        "required": [
          "name",
          "description"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "DisputeInput": {
        "title": "DisputeInput",
        "description": "A dispute request as a compact JSON Web Signature (JWS). For the request to be accepted, it MUST be signed with the same key it was used during the data exchange for this verification.\n\nThe payload of a decoded `disputeRequest` holds a valid PoR, and the received cipherblock:\n\n```typescript\n{\n  proofType: 'request'\n  type: 'disputeRequest'\n  iss: 'dest'\n  cipherblock: string // the cipherblock as a JWE string\n  iat: number // unix timestamp for issued at\n  por: string // a compact JWS holding a PoR. The proof MUST be signed with the same key as either 'orig' or 'dest' of the payload proof.\n  dataExchangeId: string // the unique id of this data exchange\n}\n```\n",
        "type": "object",
        "required": [
          "disputeRequest"
        ],
        "properties": {
          "disputeRequest": {
            "$ref": "#/components/schemas/CompactJWS"
          }
        }
      },
      "VerificationInput": {
        "title": "VerificationInput",
        "description": "A verification request is a JWS signed by either the consumer or the provider using the same key he/she used for the data exchange. The verification request payload holds a valid PoR:\n\n```typescript\n{\n  type: 'verificationRequest'\n  proofType: 'request'\n  iss: 'orig' | 'dest'\n  iat: number // unix timestamp for issued at\n  por: string // a compact JWS holding a PoR. The proof MUST be signed with the same key as either 'orig' or 'dest' of the payload proof.\n  dataExchangeId: string // the unique id of this data exchange\n}\n```\n",
        "type": "object",
        "required": [
          "verificationRequest"
        ],
        "properties": {
          "verificationRequest": {
            "$ref": "#/components/schemas/CompactJWS"
          }
        }
      }
    }
  }
}