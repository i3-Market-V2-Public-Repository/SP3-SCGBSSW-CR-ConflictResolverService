# Set to production for production mode (default), or development for development. 
NODE_ENV=production

# Server address and port.
# These are all optional. SERVER_ADDRESS defaults to 0.0.0.0, SERVER_PORT to 3000, and SERVER_PUBLIC_URI to http://${SERVER_ADDRESS}:${SERVER_PORT}
SERVER_PUBLIC_URI=
SERVER_ADDRESS=
SERVER_PORT=3000

# CORS.
# If not set defaults to *
CORS_ACCESS_CONTROL_ALLOW_ORIGIN=

# OIDC login
# These are all mandatory with the exception of OIDC_DISABLE that defaults to 0 (false). Set OIDC_DISABLE to true or 1 to disable (only for development)
OIDC_DISABLE=
OIDC_PROVIDER_URI=https://identity1.i3-market.eu/release2/oidc
OIDC_CLIENT_ID=
OIDC_CLIENT_SECRET=
# One of 'HS256', 'PS256', 'RS256', 'ES256', 'EdDSA'
OIDC_TOKEN_SIGNING_ALG=EdDSA

# JWT auth
# These are all optional
# Set JWT_DISABLE to true or 1 to disable (only for development). Defaults to 0 (false)
JWT_DISABLE=
# Set the secret to use for signing (HMACing) JWTs as a hexadecimal. If not set a new cryptographically secure random secret is used everytime the server is restarted.
JWT_SECRET=
# Set how long a token last in seconds. Defaults to 1 minute.
JWT_EXPIRES_IN=

# Conflict Resolver.
# You need to provide the CRS keypair for signing/verifying resolutions. 
# If you don't have a pair of keys in JWK format, you can easily generate them with the generateJwks utility
# Invoke it as:
# If you have cloned the project, from the root directory: ./dist/generateJwks -h
# If you have installed through npm: npx generateJwks -h
# If you are using the docker image: docker run -it --init -p 127.0.0.1:3000:3000 --env-file .env crs generateJwks -h
CRS_PRIVATE_JWK=
CRS_PUBLIC_JWK=

# Distributed Ledger Technology.
# You have to provide The RPC provider endpoint providing access to the DLT. If not set, defaults to http://***REMOVED***:8545
DLT_RPC_PROVIDER_URL=